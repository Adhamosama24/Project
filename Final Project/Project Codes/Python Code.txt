# ---------------------#
# Import Libraries
import pandas as pd 
import seaborn as sns 
import numpy as np
import matplotlib.pyplot as plt

# Load the dataset
df = pd.read_csv('G:\Real_Estate_Sales_2001-2022_GL.csv')

# Display dataset information
df.info()
df.dtypes
# View the first few rows
print(df.head())

# Get a summary of the dataset
print(df.info())

# Convert Serial Number and Year to object type for better handling
df['Serial Number'] = df['Serial Number'].astype(str)
df['Year'] = df['Year'].astype(str)

# Rename columns for consistency
df.rename(columns={'Alice': 'Sales name', 'List Year': 'Year'}, inplace=True)

# Fill null data to avoid data loss in certain columns
df.loc[df['Residential Type'] == 'Commercial', 'Property Type'] = 'Commercial'
df.loc[df['Residential Type'] == 'Vacant Land', 'Property Type'] = 'Vacant Land'
df.loc[df['Residential Type'] == 'Industrial', 'Property Type'] = 'Industrial'

# Check for null values
print(df.isnull().sum())

# Randomly assign List Year values between 2020 and 2025
df['List Year'] = np.random.choice(range(2020, 2025), size=len(df))

# Fill null cells with 'unknown' to maintain data integrity
df['Property Type'] = df['Property Type'].fillna('unknown Property')
df['Residential Type'] = df['Residential Type'].fillna('unknown Property')
df['Address'] = df['Address'].fillna('N/A')
df['Sales name'] = df['Sales name'].fillna('unknown sales')
df['Residential Type'] = df['Residential Type'].replace('unknown Property', 'unknown type')

# Check for null values again
print(df.isnull().sum())

# Get unique sales names and years
print(df['Sales name'].unique())
print(df['List Year'].unique())

# Get the date range of recorded sales
highest_date = df['Date Recorded'].max()  # Most recent date
lowest_date = df['Date Recorded'].min()    # Earliest date

# Save the modified DataFrame to a new CSV file
df.to_csv('G:\Real_State_Sales_Datav4.csv', index=False)

# Delete rows with null sale amounts
df = df[df['Sales ratio'] != 'null']

# Ensure Sale Amount is a float
df['Sale Amount'] = df['Sale Amount'].astype(float)
df['Sales ratio'] = df['Sales ratio'].astype(float)
df['Sales_Commision'] = df['Sales_Commision'].astype(float)

# Calculate Sales Commission
df['Sales_Commision'] = df['Sales ratio'] * df['Sale Amount']

# Group by Sales name, Company, and Year for total sales
sales_summary_Per_Sales_Person = df.groupby(['Sales name', 'company', 'Year'], as_index=False)['Sale Amount'].sum()
sales_summary_Per_Sales_Person['Sales Amount'] = sales_summary_Per_Sales_Person['Sale Amount'].apply(lambda x: f"{x:,.2f}")
print(sales_summary_Per_Sales_Person)

# Group by Company and Year to calculate total sales
annual_sales_PerCompany = df.groupby(['company', 'Year'])['Sale Amount'].sum().reset_index()
annual_sales_PerCompany['Sale Amount'] = annual_sales_PerCompany['Sale Amount'].apply(lambda x: f"{x:,.2f}")
print(annual_sales_PerCompany)

# Convert 'Sale Amount' to numeric for calculations
df['Sale Amount'] = pd.to_numeric(df['Sale Amount'])
print(df.dtypes)

# Group by Sales name, Company, and Year for total sales
annual_sales = df.groupby(['Sales name', 'company', 'Year'], as_index=False)['Sale Amount'].sum()

# Calculate targets for each salesperson and year (assuming 5% growth)
annual_sales['Target'] = annual_sales.groupby(['Sales name', 'company'])['Sale Amount'].shift(1) * 1.05
annual_sales['Target'] = annual_sales['Target'].fillna(annual_sales['Sale Amount'])  # First year target equals actual sales

# Rename 'Sale Amount' column to 'Total Sales'
annual_sales.rename(columns={'Sale Amount': 'Total Sales'}, inplace=True)
annual_sales['Total Sales'] = annual_sales['Total Sales'].apply(lambda x: f"{x:,.2f}")
annual_sales['Target'] = annual_sales['Target'].apply(lambda x: f"{x:,.2f}")

print(annual_sales.dtypes)

# Strip whitespace from column names and add performance column
annual_sales.columns = annual_sales.columns.str.strip()
annual_sales['Performance'] = annual_sales.apply(lambda x: 'Exceeds' if x['Total Sales'] > x['Target'] else 'Not Exceed', axis=1)

print(annual_sales)
annual_sales.to_csv('G:\Performance_Per_Year.csv', index=False)

####################################################
# Count sales per company in each year
sales_count = df.groupby(['Year', 'company']).size().reset_index(name='Sales Count')
print(sales_count)
sales_count.to_csv('G:\Sales_Per_Years_Per_Company.csv', index=False)

# Plotting Sales Count per Company by Year
plt.figure(figsize=(12, 6))
sns.barplot(data=sales_count, x='Year', y='Sales Count', hue='company')
plt.title('Sales Count per Company by Year')
plt.xlabel('Year')
plt.ylabel('Sales Count')
plt.legend(title='Company')
plt.show()

#######################################
# Sales Count Per Sales Person 
sales_count_per_Salesperson = df.groupby(['Year', 'Sales name']).size().reset_index(name='Sales Count')
print(sales_count_per_Salesperson)
sales_count_per_Salesperson.to_csv('G:\Sales_Per_Years_Per_SalesPerson.csv', index=False)

# Plotting Sales Count per Salesperson by Year
plt.figure(figsize=(14, 7))
sns.barplot(data=sales_count_per_Salesperson, x='Year', y='Sales Count', hue='Sales name')
plt.title('Sales Count per Salesperson by Year')
plt.xlabel('Year')
plt.ylabel('Sales Count')
plt.legend(title='Salesperson', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

##################################################
# Grouping by Town to get count of sales and sum of sale amount
sales_summary = df.groupby('Town').agg(
    Sales_Count=('Sales name', 'count'),  # Count of sales
    Total_Sale_Amount=('Sale Amount', 'sum')  # Sum of sale amounts
).reset_index()

# Format the total sale amount for better readability
sales_summary['Total_Sale_Amount'] = sales_summary['Total_Sale_Amount'].apply(lambda x: f"{x:,.2f}")

# Display the result
print(sales_summary)

# Save sales summary per town to CSV
sales_summary.to_csv('G:\Sales_Sum_and_Count_Per_Town.csv', index=False)